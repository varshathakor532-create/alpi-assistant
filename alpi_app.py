# alpi_app.py (All code in one file)

from kivy.app import App
from kivy.uix.boxlayout import BoxLayout
from kivy.lang import Builder
from kivy.core.window import Window

# ркЬрк░рлВрк░рлА рк▓рк╛ркЗркмрлНрк░рлЗрк░рлАркУ
from gtts import gTTS
from kivy.core.audio import SoundLoader

# ркХрлАркмрлЛрк░рлНркб ркжрлЗркЦрк╛ркп ркдрлЗ ркорк╛ркЯрлЗ
Window.softinput_mode = 'below_target'

# --- TTS Function (рк▓ркЦрк╛ркгркирлЗ ркЕрк╡рк╛ркЬркорк╛ркВ рклрлЗрк░рк╡рк╡рк╛ркирлБркВ ркХрк╛рко) ---
def speak(text):
    try:
        tts = gTTS(text=text, lang='gu')
        tts.save("response.mp3")
        sound = SoundLoader.load('response.mp3')
        if sound:
            sound.play()
    except Exception as e:
        print(f"TTS ркорк╛ркВ ркнрлВрк▓ ркЖрк╡рлА: {e}")

# --- Command Logic (ркХркорк╛ркирлНркбркирлЗ рк╕ркоркЬрк╡рк╛ркирлБркВ ркХрк╛рко) ---
def process_command_logic(command):
    command_lower = command.lower() if command else ""
    
    if not command_lower:
        return "ркХрлГрккрк╛ ркХрк░рлАркирлЗ ркХркВркИркХ рк▓ркЦрлЛ."
    if "рк╣рк╡рк╛ркорк╛рки" in command_lower or "weather" in command_lower:
        return "ркЖркЬркирлБркВ рк╣рк╡рк╛ркорк╛рки рк╕рк░рк╕ ркЕркирлЗ рк╡рк╛ркжрк│ркЫрк╛ркпрлБркВ ркЫрлЗ ркЬрк╛ркирлБ тЭдя╕П"
    elif "рк╕ркВркЧрлАркд" in command_lower or "music" in command_lower:
        return "ркдркорк╛рк░рк╛ ркорк╛ркЯрлЗ ркоркирккрк╕ркВркж рк╕ркВркЧрлАркд рк╡ркЧрк╛ркбрлА рк░рк╣рлА ркЫрлБркВ ЁЯО╢"
    elif "ркХрлЗрко ркЫрлЛ" in command_lower or "how are you" in command_lower:
        return "рк╣рлБркВ ркоркЬрк╛ркорк╛ркВ ркЫрлБркВ, ркдркорлЗ ркХрлЗрко ркЫрлЛ?"
    else:
        return "ркорк╛ркл ркХрк░рк╢рлЛ ркЬрк╛ркирлБ, рк╣рлБркВ ркЖ рк╕ркоркЬрлА рки рк╢ркХрлА ЁЯШФ"

# --- Kivy App Layout (ркПрккркирлЛ ркжрлЗркЦрк╛рк╡) ---
KV = """
BoxLayout:
    orientation: 'vertical'
    padding: 20
    spacing: 10
    Label:
        id: response_label
        text: "Alpi ркирлЗ рк╢рлБркВ ркХрк╣рлЗрк╡рк╛ ркорк╛ркВркЧрлЛ ркЫрлЛ?"
        font_size: '20sp'
        size_hint_y: 0.4
        halign: 'center'
    TextInput:
        id: command_input
        hint_text: 'ркЕрк╣рлАркВ ркдркорк╛рк░рлЛ ркХркорк╛ркирлНркб рк▓ркЦрлЛ...'
        multiline: False
        font_size: '18sp'
        size_hint_y: 0.2
    Button:
        text: "рккрлВркЫрлЛ (Ask)"
        font_size: '20sp'
        size_hint_y: 0.2
        on_press: app.handle_command()
    Label:
        size_hint_y: 0.2
"""

# --- Main App Class (ркорлБркЦрлНркп ркПркк) ---
class AlpiApp(App):
    def build(self):
        return Builder.load_string(KV)

    def handle_command(self):
        user_command = self.root.ids.command_input.text
        response_text = process_command_logic(user_command)
        self.root.ids.response_label.text = response_text
        speak(response_text)
        self.root.ids.command_input.text = ""

# --- Run the App (ркПркк ркЪрк▓рк╛рк╡рлЛ) ---
if __name__ == "__main__":
    AlpiApp().run()
